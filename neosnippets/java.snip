## Access Modifiers
snippet     protected
alias       po,pro
options     head
    protected ${1}

snippet     public
alias       pu
options     head
    public ${1}

snippet     private
alias       pr
options     head
    private ${1}


##class
snippet     class
abbr        cle
alias       cle
options     head
    public class ${1:`expand('%:t:r')`} ${2:extends ${3:parentClass\}} ${4:implements ${5:interfaces\}} {
        ${6}
    }



snippet interface
    interface ${1:`expand('%:t:r)`} ${2:extends ${3:#:Parent\}} {
        ${4:TARGET}
    }

snippet     method
alias       m
options     head
    ${1:public ${2:static\}} ${3:void} ${4:methodName}(${5:#:args}) {
        ${6}
    }


snippet enum
abbr enum {}
    enum ${1:#:name} {
        ${2:TARGET}
    }

snippet var
    ${1:#:type} ${2:#:var}${3};

snippet const
    ${1:private} static final ${2:#:type} ${3:#:var} = ${4};${5}

snippet const_string
    ${1:private} static final String ${2:var} = "${3}";${5}

snippet assert
    assert ${1:#:test} : ${2:#:Failure message};${3}

snippet if
    if (${1}) {
        ${2:TARGET}
    }
snippet else
    else {
        ${1:TARGET}
    }

snippet elif
alias elseif
    else if (${1}) {
        ${2:TARGET}
    }

snippet while
    while (${1}) {
        ${2:TARGET}
    }

snippet for
    for (${1}; ${2}; ${3}) {
        ${4:TARGET}
    }

snippet foreach
alias   fore
    for (${1} : ${2}) {
        ${3:TARGET}
    }

snippet switch
    switch (${1}) {
        ${2:TARGET}
    }

snippet case
    case ${1}:
        ${2:TARGET}
    ${0}

snippet br
    break;

snippet default
alias   de
    default:
        ${0}

snippet try
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    }

snippet try_resources
    try (${1:#:Resources}) {
        ${0:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    }

snippet try_finally
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    } finally {
        ${4}
    }

snippet catch
    catch (${1:Exception} ${2:e}) {
        ${0:e.printStackTrace();}
    }

snippet finally
    finally {
        ${0:TARGET}
    }

snippet th
options word
    throw ${0}

snippet sy
options word
    synchronized

snippet testclass
alias   tc
options head
    public class ${1} extends ${2:TestCase} {
        ${0:TARGET}
    }

snippet test
options head
    public void test${1:#:Name}() throws Exception {
        ${0:TARGET}
    }


##Basic java imports

snippet import
alias   im
options head
    import ${1}

snippet j.u
alias   j-u
    java.util.${1}

snippet j.i
alias   j-i
    java.io.${1}

snippet j.b
alias   j-b
    java.beans.${1}

snippet j.n
alias   j-n
    java.net.${1}

snippet j.m
alias   j-m
    java.math.${1}

snippet main
    class `expand('%:p:t:r')` {
        public static void main(String args[]) {
            ${0:#:body}
        }
    }


snippet println
alias   pl
options word
    System.out.println(${1});${2}

snippet print
alias   prt
options word
    System.out.print(${1});${2}

#javadoc
snippet comment
alias   /**
options head
    /**
     * ${0:TARGET}
     */

snippet author
    @author ${0:$TM_FULLNAME}

snippet {code
    {@code ${0}

snippet deprecated
    @deprecated ${0:#:description}

snippet {docRoot
    {@docRoot

snippet {inheritDoc
    {@inheritDoc

snippet {link
    {@link ${1:#:target} ${0:#:label}

snippet {linkplain
    {@linkplain ${1:#:target} ${0:#:label}

snippet {literal
    {@literal ${0}

snippet param
    @param ${1:#:var} ${0:#:description}

snippet return
    @return ${0:#:description}

snippet see
    @see ${0:#:reference}

snippet serial
    @serial ${0:#:description}

snippet sd
    @serialField ${0:#:description}

snippet sf
    @serialField ${1:#:name} ${2:#:type} ${0:#:description}

snippet since
    @since ${0:#:version}

snippet throws
    @throws ${1:#:class} ${0:#:description}

snippet {value
    {@value ${0}

snippet version
alias ver
    @version ${0:#:version}

snippet     helloworld
options     head
  public class ${1:Hello} {
    static public void main(String args[]) {
      System.out.println("Hello, world!");
    }
  }
